package me.rexysaur.void_.Client.cosmetics;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Set;

import me.rexysaur.void_.Client.Client;
import net.minecraft.client.renderer.entity.RenderPlayer;
import net.minecraft.util.ResourceLocation;

public class HatManager {
	public static boolean hasEquippedHat = false;
	public static CosmeticHat equippedHat = null;
	
	public static void equipHat(CosmeticHat hat)
	{
		HatManager.hasEquippedHat = true;
		HatManager.equippedHat = hat;
	}
	
	public static void dequipCape()
	{
		HatManager.hasEquippedHat = false;
		HatManager.equippedHat = null;
	}
	
	public static boolean hasEquippedHat(CosmeticHat hat)
	{
		return HatManager.equippedHat.equals(hat);
	}
	
	public static Class<Set<CosmeticHat>> getHat(String name, RenderPlayer player)
	{
		Class<Set<CosmeticHat>> hat = null;
		
		int i = 0;
		for (Class<Set<CosmeticHat>> h : (ArrayList<Class<Set<CosmeticHat>>>) Client.INSTANCE.cosmeticmanager.hats)
		{
			try {
				CosmeticHat instance = (CosmeticHat) Class.forName("me.rexysaur.void_.Client.cosmetics.impl.hats." + name + "." + name).getConstructor(h).newInstance(player);
			} catch (InstantiationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalArgumentException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (InvocationTargetException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (NoSuchMethodException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (SecurityException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			if(h.getName().equals(name))
			{
				hat = h;
			}
			
			i++;
		}

		return hat;
	}
	
	public static ResourceLocation loadCape()
	{
		return CapeManager.equippedCape.getResource();
	}
}
